{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red0\green128\blue0;\red186\green33\blue33;\red0\green0\blue255;\red188\green122\blue0;\red25\green23\blue124;\red64\green128\blue128;\red176\green0\blue64;\red187\green187\blue187;\red0\green0\blue128;\red160\green160\blue0;\red170\green34\blue255;\red136\green136\blue136;\red136\green0\blue0;\red102\green102\blue102;\red187\green102\blue136;\red0\green68\blue221;\red210\green65\blue58;\red255\green0\blue0;\red160\green0\blue0;\red187\green102\blue34;\red0\green160\blue0;\red125\green144\blue41;\red128\green0\blue128;\red153\green153\blue153;}\f0 {\cf14 .}{\chbrdr\chcfpat18 \\}A2_Comp_Project{\chbrdr\chcfpat18 \\}app{\chbrdr\chcfpat18 \\}src{\chbrdr\chcfpat18 \\}main{\chbrdr\chcfpat18 \\}java{\chbrdr\chcfpat18 \\}com{\chbrdr\chcfpat18 \\}example{\chbrdr\chcfpat18 \\}natha_000{\chbrdr\chcfpat18 \\}a2_comp_project{\chbrdr\chcfpat18 \\}Graphing_3D{\chbrdr\chcfpat18 \\}ShuntingYard{\cf14 .}{\cf22 java}\par
{\cf1\b package} {\cf3\b com.example.natha_000.a2_comp_project.Graphing_3D}{\cf14 ;}\par
\par
{\cf6\i /**\par
 * Created by Natha_000 on 02/01/2017.\par
 */}\par
\par
{\cf1\b import} {\cf3\b java.util.Deque}{\cf14 ;}\par
{\cf1\b import} {\cf3\b java.util.HashMap}{\cf14 ;}\par
{\cf1\b import} {\cf3\b java.util.LinkedList}{\cf14 ;}\par
{\cf1\b import} {\cf3\b java.util.List}{\cf14 ;}\par
{\cf1\b import} {\cf3\b java.util.Map}{\cf14 ;}\par
{\cf1\b import} {\cf3\b java.util.Objects}{\cf14 ;}\par
\par
{\cf6\i /**\par
 * This class is used to perform the suhnting yard algorithm as well as\par
 * methods relating to the running of this algorithm\par
*/}\par
{\cf1\b public} {\cf1\b class} {\cf3\b ShuntingYard} {\cf14 \{}\par
    {\cf1\b private} {\cf1\b static} {\cf7 boolean} left {\cf14 =} {\cf1\b true}{\cf14 ;}\par
    {\cf1\b private} {\cf1\b static} {\cf7 boolean} right {\cf14 =} {\cf1\b false}{\cf14 ;}\par
\par
    {\cf6\i /**\par
     * This stores the precedence of the common binary operators\par
    */}\par
    {\cf1\b private} {\cf1\b static} Map{\cf14 <}String{\cf14 ,}Integer{\cf14 >} ops_prec {\cf14 =} {\cf1\b new} HashMap{\cf14 <}String{\cf14 ,}\par
                                                              Integer{\cf14 >}{\cf14 (}{\cf14 )}{\cf14 \{}{\cf14 \{}\par
        put{\cf14 (}{\cf2 "+"}{\cf14 ,}{\cf14 2}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "-"}{\cf14 ,}{\cf14 2}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "*"}{\cf14 ,}{\cf14 3}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "/"}{\cf14 ,}{\cf14 3}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "^"}{\cf14 ,}{\cf14 4}{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}{\cf14 \}}{\cf14 ;}\par
\par
    {\cf6\i /**\par
     * This stores the associativity of the common binary operators\par
    */}\par
    {\cf1\b private} {\cf1\b static} Map{\cf14 <}String{\cf14 ,}Boolean{\cf14 >} ops_assoc {\cf14 =} {\cf1\b new} HashMap{\cf14 <}String{\cf14 ,}\par
                                                               Boolean{\cf14 >}{\cf14 (}{\cf14 )}{\cf14 \{}{\cf14 \{}\par
        put{\cf14 (}{\cf2 "+"}{\cf14 ,}left{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "-"}{\cf14 ,}left{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "*"}{\cf14 ,}left{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "/"}{\cf14 ,}left{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "^"}{\cf14 ,}right{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}{\cf14 \}}{\cf14 ;}\par
\par
    {\cf6\i /**\par
     * This stores the associated binary operators with their binary function\par
    */}\par
    {\cf1\b public} {\cf1\b static} Map{\cf14 <}String{\cf14 ,}String{\cf14 >} ops_2_arg {\cf14 =} {\cf1\b new} HashMap{\cf14 <}String{\cf14 ,}String{\cf14 >}{\cf14 (}{\cf14 )}{\cf14 \{}{\cf14 \{}\par
        put{\cf14 (}{\cf2 "+"}{\cf14 ,}{\cf2 "add"}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "-"}{\cf14 ,}{\cf2 "sub"}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "*"}{\cf14 ,}{\cf2 "mul"}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "/"}{\cf14 ,}{\cf2 "div"}{\cf14 )}{\cf14 ;}\par
        put{\cf14 (}{\cf2 "^"}{\cf14 ,}{\cf2 "power"}{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}{\cf14 \}}{\cf14 ;}\par
\par
    {\cf6\i /**\par
     * This method is used to check whether the first operator should be added\par
     * To the stack\par
     * @param  o1 The first operator\par
     * @param  o2 The second operator\par
     * @return Whether the first operator should be pushed to the stack\par
    */}\par
    {\cf1\b public} {\cf1\b static} {\cf7 boolean} {\cf3 opsCheck}{\cf14 (}String o1{\cf14 ,} String o2{\cf14 )} {\cf14 \{}\par
        {\cf1\b if} {\cf14 (}Objects{\cf14 .}{\cf22 equals}{\cf14 (}ops_assoc{\cf14 .}{\cf22 get}{\cf14 (}o1{\cf14 )}{\cf14 ,} left{\cf14 )}{\cf14 )}{\cf14 \{}\par
            {\cf1\b return} {\cf14 (}{\cf7 int}{\cf14 )} ops_prec{\cf14 .}{\cf22 get}{\cf14 (}o1{\cf14 )} {\cf14 <}{\cf14 =} {\cf14 (}{\cf7 int}{\cf14 )} ops_prec{\cf14 .}{\cf22 get}{\cf14 (}o2{\cf14 )}{\cf14 ;}\par
        {\cf14 \}} {\cf1\b else} {\cf14 \{}\par
            {\cf1\b return} {\cf14 (}{\cf7 int}{\cf14 )} ops_prec{\cf14 .}{\cf22 get}{\cf14 (}o1{\cf14 )} {\cf14 <} {\cf14 (}{\cf7 int}{\cf14 )} ops_prec{\cf14 .}{\cf22 get}{\cf14 (}o2{\cf14 )}{\cf14 ;}\par
        {\cf14 \}}\par
    {\cf14 \}}\par
\par
    {\cf6\i /**\par
     * This method is used to check whether the inputted string contains a\par
     * number or a variable\par
     * @param s The token to be checked\par
     * @return True if s is a float or variable, False otherwise\par
    */}\par
    {\cf1\b public} {\cf1\b static} {\cf7 boolean} {\cf3 isAlgebraic}{\cf14 (}String s{\cf14 )} {\cf14 \{}\par
        {\cf1\b return} s{\cf14 .}{\cf22 matches}{\cf14 (}{\cf2 "-?\\\\d+(\\\\.\\\\d+)?"}{\cf14 )} {\cf14 |}{\cf14 |}\par
                        Objects{\cf14 .}{\cf22 equals}{\cf14 (}s{\cf14 ,}{\cf2 "x"}{\cf14 )} {\cf14 |}{\cf14 |}\par
                        Objects{\cf14 .}{\cf22 equals}{\cf14 (}s{\cf14 ,}{\cf2 "y"}{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}\par
\par
    {\cf6\i /**\par
     * This method checks whether the inputted string is a function\par
     * @param s The token to be checked\par
     * @return True if s is a valid function, False otherwise\par
    */}\par
    {\cf1\b public} {\cf1\b static} {\cf7 boolean} {\cf3 isFunction}{\cf14 (}String s{\cf14 )} {\cf14 \{}\par
        {\cf1\b return} {\cf14 (}{\cf14 !}Objects{\cf14 .}{\cf22 equals}{\cf14 (}s{\cf14 ,}{\cf1\b null}{\cf14 )} {\cf14 &}{\cf14 &}\par
                {\cf14 !}isAlgebraic{\cf14 (}s{\cf14 )} {\cf14 &}{\cf14 &}\par
                s{\cf14 .}{\cf22 length}{\cf14 (}{\cf14 )}{\cf14 >}{\cf14 1} {\cf14 &}{\cf14 &}\par
                {\cf14 !}Objects{\cf14 .}{\cf22 equals}{\cf14 (}s{\cf14 ,}{\cf2 "x"}{\cf14 )} {\cf14 &}{\cf14 &}\par
                {\cf14 !}Objects{\cf14 .}{\cf22 equals}{\cf14 (}s{\cf14 ,}{\cf2 "y"}{\cf14 )} {\cf14 &}{\cf14 &}\par
                {\cf14 !}s{\cf14 .}{\cf22 contains}{\cf14 (}{\cf2 ")"}{\cf14 )}{\cf14 )} {\cf14 &}{\cf14 &}\par
                {\cf14 !}s{\cf14 .}{\cf22 contains}{\cf14 (}{\cf2 "("}{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}\par
\par
    {\cf6\i /**\par
     * This method performs the shunting yard algorithm as described by dijkstra\par
     * , using isAlgebraic, isFunction, and opsCheck\par
     * @param tokens A list of tokens, which represent a function\par
     * @return A string that represents the inputted function in reverse polish\par
     * notation\par
     * @see #isAlgebraic(String)\par
     * @see #isFunction(String)\par
     * @see #opsCheck(String, String)\par
    */}\par
    {\cf1\b public} {\cf1\b static} String {\cf3 shuntingYard}{\cf14 (}List{\cf14 <}String{\cf14 >} tokens{\cf14 )} {\cf14 \{}\par
        {\cf6\i // This shall be used as a queue\par
}        StringBuilder output {\cf14 =} {\cf1\b new} StringBuilder{\cf14 (}{\cf14 )}{\cf14 ;}\par
        {\cf6\i // This shall be used as a stack\par
}        Deque{\cf14 <}String{\cf14 >} stack  {\cf14 =} {\cf1\b new} LinkedList{\cf14 <}{\cf14 >}{\cf14 (}{\cf14 )}{\cf14 ;}\par
\par
        {\cf6\i // For token in the token list\par
}        {\cf1\b for} {\cf14 (}String token {\cf14 :} tokens{\cf14 )} {\cf14 \{}\par
            {\cf6\i // If the number is a number or variable, push it to the stack\par
}            {\cf1\b if} {\cf14 (}isAlgebraic{\cf14 (}token{\cf14 )}{\cf14 )}{\cf14 \{}\par
                output{\cf14 .}{\cf22 append}{\cf14 (}token{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
\par
            {\cf6\i // Else, if it is an opperator\par
}            {\cf14 \}} {\cf1\b else} {\cf1\b if} {\cf14 (}ops_prec{\cf14 .}{\cf22 containsKey}{\cf14 (}token{\cf14 )}{\cf14 )}{\cf14 \{}\par
\par
                {\cf6\i // While there is an operator in the stack and:\par
}                {\cf1\b while} {\cf14 (}{\cf1\b true}{\cf14 )}{\cf14 \{}\par
                    {\cf6\i /*\par
                    IF:\par
                    (The stack isn't empty) AND\par
                    (The next operator in the stack is an operator) AND\par
                    (The first operator is left asociative and\par
                      its precedence is less than or equal to that of the second\par
                      operator OR\par
                    The first operator is right asociative and\par
                      its precedence is less than to that of the second\par
                      operator)\par
                    */}\par
                    {\cf1\b if} {\cf14 (}{\cf14 !}stack{\cf14 .}{\cf22 isEmpty}{\cf14 (}{\cf14 )} {\cf14 &}{\cf14 &}\par
                        ops_prec{\cf14 .}{\cf22 containsKey}{\cf14 (}stack{\cf14 .}{\cf22 peek}{\cf14 (}{\cf14 )}{\cf14 )} {\cf14 &}{\cf14 &}\par
                        opsCheck{\cf14 (}token{\cf14 ,}\par
                                stack{\cf14 .}{\cf22 peek}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 )}{\cf14 \{}\par
                        {\cf6\i // Push the operator to the queue\par
}                        output{\cf14 .}{\cf22 append}{\cf14 (}stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
                    {\cf14 \}} {\cf1\b else} {\cf14 \{}\par
                        {\cf1\b break}{\cf14 ;}\par
                    {\cf14 \}}\par
                {\cf14 \}}\par
                {\cf6\i // Push the operator to the stack\par
}                stack{\cf14 .}{\cf22 push}{\cf14 (}token{\cf14 )}{\cf14 ;}\par
            {\cf6\i // If the token is a left parenthesis\par
}            {\cf14 \}} {\cf1\b else} {\cf1\b if} {\cf14 (}Objects{\cf14 .}{\cf22 equals}{\cf14 (}token{\cf14 ,}{\cf2 "("}{\cf14 )}{\cf14 )} {\cf14 \{}\par
                {\cf6\i // Push it to the stack\par
}                stack{\cf14 .}{\cf22 push}{\cf14 (}token{\cf14 )}{\cf14 ;}\par
            {\cf6\i // If the token is a right parenthesis\par
}            {\cf14 \}} {\cf1\b else} {\cf1\b if} {\cf14 (}Objects{\cf14 .}{\cf22 equals}{\cf14 (}token{\cf14 ,}{\cf2 ")"}{\cf14 )}{\cf14 )}{\cf14 \{}\par
                {\cf6\i // While the token at the top of the stack isn't a\par
}                {\cf6\i // Right parenthesis\par
}                {\cf1\b while} {\cf14 (}{\cf14 !}Objects{\cf14 .}{\cf22 equals}{\cf14 (}stack{\cf14 .}{\cf22 peek}{\cf14 (}{\cf14 )}{\cf14 ,}{\cf2 "("}{\cf14 )}{\cf14 )} {\cf14 \{}\par
                    {\cf6\i // Pop it from the stack and append it to the queue\par
}                    output{\cf14 .}{\cf22 append}{\cf14 (}stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
                {\cf14 \}}\par
                {\cf6\i // Pop the left parenthesis from the stack but\par
}                {\cf6\i // Don't add it to the queue\par
}                stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 ;}\par
\par
                {\cf6\i // If the token at the top is a function\par
}                {\cf1\b if} {\cf14 (}isFunction{\cf14 (}stack{\cf14 .}{\cf22 peek}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 )} {\cf14 \{}\par
                    {\cf6\i // Pop it from the stack and append it to the queue\par
}                    output{\cf14 .}{\cf22 append}{\cf14 (}stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
                {\cf14 \}}\par
\par
            {\cf6\i // If the token is a argument seperator (a comma)\par
}            {\cf14 \}} {\cf1\b else} {\cf1\b if} {\cf14 (}Objects{\cf14 .}{\cf22 equals}{\cf14 (}token{\cf14 ,}{\cf2 ","}{\cf14 )}{\cf14 )} {\cf14 \{}\par
                {\cf6\i // While the token at the top of the stack isn't a\par
}                {\cf6\i // Right parenthesis\par
}                {\cf1\b while} {\cf14 (}{\cf14 !}Objects{\cf14 .}{\cf22 equals}{\cf14 (}stack{\cf14 .}{\cf22 peek}{\cf14 (}{\cf14 )}{\cf14 ,}{\cf2 "("}{\cf14 )}{\cf14 )} {\cf14 \{}\par
                    {\cf6\i // Pop it from the stack and append it to the queue\par
}                    output{\cf14 .}{\cf22 append}{\cf14 (}stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
                {\cf14 \}}\par
            {\cf6\i // If the token is a function token\par
}            {\cf14 \}} {\cf1\b else} {\cf1\b if} {\cf14 (}isFunction{\cf14 (}token{\cf14 )}{\cf14 )}{\cf14 \{}\par
                {\cf6\i // Push it onto the stack\par
}                stack{\cf14 .}{\cf22 push}{\cf14 (}token{\cf14 )}{\cf14 ;}\par
            {\cf14 \}}\par
        {\cf14 \}}\par
\par
        {\cf6\i // After all the tokens have been read\par
}        {\cf6\i // While the stack isn't empty\par
}        {\cf1\b while} {\cf14 (}{\cf14 !}stack{\cf14 .}{\cf22 isEmpty}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 \{}\par
            {\cf6\i // Pop it from the stack and append it to the queue\par
}            output{\cf14 .}{\cf22 append}{\cf14 (}stack{\cf14 .}{\cf22 pop}{\cf14 (}{\cf14 )}{\cf14 )}{\cf14 .}{\cf22 append}{\cf14 (}{\cf2 " "}{\cf14 )}{\cf14 ;}\par
        {\cf14 \}}\par
        {\cf6\i // Return the function as a string\par
}        {\cf1\b return} output{\cf14 .}{\cf22 toString}{\cf14 (}{\cf14 )}{\cf14 .}{\cf22 trim}{\cf14 (}{\cf14 )}{\cf14 ;}\par
    {\cf14 \}}\par
{\cf14 \}}\par
}